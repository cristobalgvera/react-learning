{"version":3,"sources":["components/UI/Form/Input/Input.jsx","components/UI/Form/Input/Input.module.scss","components/Burger/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Burger/CheckoutSummary/CheckoutSummary.jsx","containers/Checkout/ContactData/ContactData.jsx","containers/Checkout/Checkout.jsx"],"names":["PropTypes","string","number","bool","func","Input","type","name","placeholder","value","change","className","InputStyle","htmlFor","onChange","target","property","module","exports","connect","shape","reduxState","ingredients","ingredientsReducer","cancelled","continued","CheckoutSummaryStyle","style","width","margin","Burger","Button","clicked","initialContactData","email","address","street","postalCode","price","priceReducer","authReducer","idToken","localId","dispatch","reduxActions","onCheckout","resetIngredients","resetPrice","history","useHistory","useState","contactData","setContactData","loading","setLoading","deliveryMethod","setDeliveryMethod","handleFormChange","updatedContactData","Object","keys","includes","prevState","updateState","handleFormSubmit","event","preventDefault","window","alert","push","BURGER_BUILDER","data","customer","axios","post","then","response","console","log","catch","error","finally","confirm","SIGN_IN","ContactDataStyle","Spinner","goBack","values","reduce","acc","cur","replace","CONTACT_DATA","path","component","ContactData"],"mappings":"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","file":"static/js/3.87333199.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Input as InputStyle } from \"./Input.module.scss\";\r\n\r\nconst Input = ({ type, name, placeholder, value, change }) => (\r\n  <div className={InputStyle}>\r\n    <label htmlFor={name}>{name}</label>\r\n    <input\r\n      type={type}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={({ target: { value, name: property } }) =>\r\n        change(property, value)\r\n      }\r\n    />\r\n  </div>\r\n);\r\n\r\nconst { string, number, bool, func } = PropTypes;\r\nInput.propTypes = {\r\n  type: string,\r\n  name: string,\r\n  placeholder: string,\r\n  value: string || number || bool,\r\n  change: func,\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1luiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3Woyf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3do9z\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { CheckoutSummary as CheckoutSummaryStyle } from \"./CheckoutSummary.module.scss\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst CheckoutSummary = ({\r\n  reduxState: { ingredients },\r\n  cancelled,\r\n  continued,\r\n}) => (\r\n  <div className={CheckoutSummaryStyle}>\r\n    <h1>Whe hope it taste well!</h1>\r\n    <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n      <Burger ingredients={ingredients} />\r\n      <Button type=\"Danger\" clicked={cancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button type=\"Success\" clicked={continued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst { func, number, shape } = PropTypes;\r\nCheckoutSummary.propTypes = {\r\n  reduxState: shape({\r\n    ingredients: shape({\r\n      salad: number,\r\n      bacon: number,\r\n      cheese: number,\r\n      meat: number,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  continued: func.isRequired,\r\n  cancelled: func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ ingredientsReducer: { ingredients } }) => ({\r\n  reduxState: { ingredients: ingredients },\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutSummary);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport axios from '../../../services/axios-orders';\r\nimport Button from '../../../components/UI/Button/Button';\r\n\r\nimport { ContactData as ContactDataStyle } from './ContactData.module.scss';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Form/Input/Input';\r\nimport { resetPrice, resetIngredients } from '../../../store/actions/index';\r\nimport { updateState } from '../../../shared/utility';\r\nimport { BURGER_BUILDER, SIGN_IN } from '../../../components/Routes/path/path';\r\n\r\nconst initialContactData = {\r\n    name: '',\r\n    email: '',\r\n    address: {\r\n        street: '',\r\n        postalCode: '',\r\n    },\r\n};\r\n\r\nconst ContactData = (\r\n    {\r\n        reduxState: {\r\n            ingredients,\r\n            price,\r\n            idToken,\r\n            localId,\r\n        },\r\n        reduxActions: { onCheckout },\r\n    },\r\n) => {\r\n    const history = useHistory();\r\n    const [contactData, setContactData] = useState({ ...initialContactData });\r\n    const [loading, setLoading] = useState(false);\r\n    const [deliveryMethod, setDeliveryMethod] = useState('fastest');\r\n\r\n    const handleFormChange = ( property, value ) => {\r\n        let updatedContactData = { ...contactData };\r\n\r\n        if (!Object.keys(updatedContactData).includes(property)) {\r\n            setContactData(( prevState ) => updateState(prevState, {\r\n                    address: updateState(prevState['address'], {\r\n                        [property]: value,\r\n                    }),\r\n                }),\r\n            );\r\n            return;\r\n        }\r\n\r\n        setContactData(( prevState ) => updateState(prevState, { [property]: value }));\r\n    };\r\n\r\n    const handleFormSubmit = ( event ) => {\r\n        event.preventDefault();\r\n        setLoading(true);\r\n        if (!ingredients) {\r\n            window.alert(\r\n                'Invalid order, there are no ingredients, you\\'ll be redirected',\r\n            );\r\n            history.push(BURGER_BUILDER);\r\n        }\r\n\r\n        if (idToken) {\r\n            const data = {\r\n                ingredients: ingredients,\r\n                price: price,\r\n                customer: contactData,\r\n                deliveryMethod: deliveryMethod,\r\n                localId: localId,\r\n            };\r\n\r\n            ingredients &&\r\n            axios\r\n                .post(`/orders.json?auth=${idToken}`, data)\r\n                .then(( response ) => console.log(response))\r\n                .catch(( error ) => console.log(error))\r\n                .finally(() => {\r\n                    if (window.alert('Order ready!') || true) {\r\n                        setLoading(false);\r\n                        onCheckout();\r\n                        history.push(BURGER_BUILDER);\r\n                    }\r\n                });\r\n        } else {\r\n            if (window.confirm('You must be logged, wanna log in?'))\r\n                history.push(SIGN_IN);\r\n\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const {\r\n        name,\r\n        email,\r\n        address: { street, postalCode },\r\n    } = contactData;\r\n    const formHelper = () =>\r\n        loading ? (\r\n            <Spinner/>\r\n        ) : (\r\n            <form>\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={name}\r\n                    change={handleFormChange}\r\n                />\r\n                <Input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    change={handleFormChange}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"street\"\r\n                    placeholder=\"Street\"\r\n                    value={street}\r\n                    change={handleFormChange}\r\n                />\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"postalCode\"\r\n                    placeholder=\"Postal code\"\r\n                    value={postalCode}\r\n                    change={handleFormChange}\r\n                />\r\n                <div>\r\n                    <label htmlFor=\"deliveryMethod\">\r\n                        <strong>Delivery Method</strong>\r\n                    </label>\r\n                    <br/>\r\n                    <select\r\n                        name=\"deliveryMethod\"\r\n                        value={deliveryMethod}\r\n                        onChange={( { target: { value } } ) => setDeliveryMethod(value)}\r\n                    >\r\n                        <option value=\"fastest\">Fastest</option>\r\n                        <option value=\"cheapest\">Cheapest</option>\r\n                    </select>\r\n                </div>\r\n                <Button type=\"Success\" clicked={handleFormSubmit}>\r\n                    ORDER\r\n                </Button>\r\n            </form>\r\n        );\r\n\r\n    return (\r\n        <div className={ContactDataStyle}>\r\n            <h4>Enter your contact data</h4>\r\n            {formHelper()}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst { number, shape } = PropTypes;\r\nContactData.propTypes = {\r\n    reduxState: shape({\r\n        ingredients: shape({\r\n            salad: number,\r\n            bacon: number,\r\n            cheese: number,\r\n            meat: number,\r\n        }).isRequired,\r\n        price: number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\nconst mapStateToProps = (\r\n    {\r\n        ingredientsReducer: { ingredients },\r\n        priceReducer: { price },\r\n        authReducer: { idToken, localId },\r\n    },\r\n) => ({\r\n    reduxState: {\r\n        ingredients,\r\n        price,\r\n        idToken,\r\n        localId,\r\n    },\r\n});\r\n\r\nconst mapDispatchToProps = ( dispatch ) => ({\r\n    reduxActions: {\r\n        onCheckout: () => {\r\n            dispatch(resetIngredients());\r\n            dispatch(resetPrice());\r\n        },\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, useHistory } from 'react-router-dom';\r\nimport CheckoutSummary from '../../components/Burger/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { BURGER_BUILDER, CONTACT_DATA } from '../../components/Routes/path/path';\r\n\r\nconst Checkout = ( { reduxState: { ingredients } } ) => {\r\n    const history = useHistory();\r\n\r\n    const cancelledCheckoutHandler = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    const continuedCheckoutHandler = () => {\r\n        const areEnoughIngredients =\r\n            ingredients &&\r\n            Object.values(ingredients).reduce(( acc, cur ) => acc + cur, 0) > 0;\r\n        if (areEnoughIngredients) history.replace(CONTACT_DATA);\r\n        else if (window.confirm('Add some ingredients!'))\r\n            history.push(BURGER_BUILDER);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CheckoutSummary\r\n                cancelled={cancelledCheckoutHandler}\r\n                continued={continuedCheckoutHandler}\r\n            />\r\n            <Route path={CONTACT_DATA} component={ContactData}/>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ( { ingredientsReducer: { ingredients } } ) => ({\r\n    reduxState: { ingredients },\r\n});\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}