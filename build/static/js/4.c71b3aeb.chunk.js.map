{"version":3,"sources":["components/UI/Form/Input/Input.jsx","components/UI/Form/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.jsx"],"names":["PropTypes","string","number","bool","func","Input","type","name","placeholder","value","change","className","InputStyle","htmlFor","onChange","target","property","module","exports","initialCredential","email","password","connect","authReducer","reduxState","error","loading","localId","dispatch","reduxActions","onInitAuthentication","credential","isSignUp","initAuthentication","useState","setCredential","setIsSignUp","handleChange","prevState","updateState","handleSubmit","event","preventDefault","switchAuthModeHandler","AuthStyle","to","BURGER_BUILDER","message","clicked"],"mappings":"uKAoBuCA,IAA/BC,OAA+BD,IAAvBE,OAAuBF,IAAfG,KAAeH,IAATI,KASfC,IAxBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,YAAaC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,OAAnC,OACZ,sBAAKC,UAAWC,QAAhB,UACE,uBAAOC,QAASN,EAAhB,SAAuBA,IACvB,uBACED,KAAMA,EACNC,KAAMA,EACNC,YAAaA,EACbC,MAAOA,EACPK,SAAU,oBAAGC,OAAUN,EAAb,EAAaA,MAAaO,EAA1B,EAAoBT,KAApB,OACRG,EAAOM,EAAUP,W,oBCbzBQ,EAAOC,QAAU,CAAC,MAAQ,uB,oBCA1BD,EAAOC,QAAU,CAAC,KAAO,qB,oJCUnBC,EAAoB,CACxBC,MAAO,GACPC,SAAU,IA6EGC,uBAfS,SAAC,GAAD,QAAGC,YAAH,MAAmD,CACzEC,WAAY,CACVC,MAFoB,EAAkBA,MAGtCC,QAHoB,EAAyBA,QAI7CC,QAJoB,EAAkCA,aAQ/B,SAACC,GAAD,MAAe,CACxCC,aAAc,CACZC,qBAAsB,SAACC,EAAYC,GAAb,OACpBJ,EAASK,YAAmBF,EAAYC,SAI/BV,EA1EF,SAAC,GAGP,IAAD,IAFJE,WAAcC,EAEV,EAFUA,MAAOC,EAEjB,EAFiBA,QAASC,EAE1B,EAF0BA,QACdG,EACZ,EADJD,aAAgBC,qBACZ,EACgCI,mBAASf,GADzC,mBACGY,EADH,KACeI,EADf,OAE4BD,oBAAS,GAFrC,mBAEGF,EAFH,KAEaI,EAFb,KAGIhB,EAAoBW,EAApBX,MAAOC,EAAaU,EAAbV,SAETgB,EAAe,SAACrB,EAAUP,GAC9B0B,GAAc,SAACG,GAAD,OACZC,YAAYD,EAAD,eACRtB,EAAWP,QAKZ+B,EAAe,SAACC,GACpBA,EAAMC,iBACNZ,EAAqBC,EAAYC,IAG7BW,EAAwB,WAC5BP,GAAY,SAACE,GAAD,OAAgBA,MAkC9B,OAAO,qBAAK3B,UAAWiC,OAAhB,SAA4BlB,EAAU,cAAC,IAAD,IA9B1CC,EA2BC,cAAC,IAAD,CAAUkB,GAAIC,MA1Bd,qCACE,iCACE,cAAC,IAAD,CACExC,KAAM,QACNC,KAAM,QACNC,YAAa,QACbC,MAAOW,EACPV,OAAQ2B,IAEV,cAAC,IAAD,CACE/B,KAAM,WACNC,KAAM,WACNC,YAAa,aACbC,MAAOY,EACPX,OAAQ2B,IAETZ,GAAS,4BAAIA,EAAMsB,UACpB,cAAC,IAAD,CAAQzC,KAAM,UAAW0C,QAASR,EAAlC,SACGR,EAAW,QAAU,eAG1B,eAAC,IAAD,CAAQ1B,KAAM,SAAU0C,QAASL,EAAjC,uBACaX,EAAW,UAAY","file":"static/js/4.c71b3aeb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Input as InputStyle } from \"./Input.module.scss\";\r\n\r\nconst Input = ({ type, name, placeholder, value, change }) => (\r\n  <div className={InputStyle}>\r\n    <label htmlFor={name}>{name}</label>\r\n    <input\r\n      type={type}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={({ target: { value, name: property } }) =>\r\n        change(property, value)\r\n      }\r\n    />\r\n  </div>\r\n);\r\n\r\nconst { string, number, bool, func } = PropTypes;\r\nInput.propTypes = {\r\n  type: string,\r\n  name: string,\r\n  placeholder: string,\r\n  value: string || number || bool,\r\n  change: func,\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1luiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3_QNE\"};","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Input from \"../../components/UI/Form/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport { Auth as AuthStyle } from \"./Auth.module.scss\";\r\nimport { initAuthentication } from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { updateState } from \"../../shared/utility\";\r\nimport { BURGER_BUILDER } from \"../../components/Routes/path/path\";\r\n\r\nconst initialCredential = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst Auth = ({\r\n  reduxState: { error, loading, localId },\r\n  reduxActions: { onInitAuthentication },\r\n}) => {\r\n  const [credential, setCredential] = useState(initialCredential);\r\n  const [isSignUp, setIsSignUp] = useState(true);\r\n  const { email, password } = credential;\r\n\r\n  const handleChange = (property, value) => {\r\n    setCredential((prevState) =>\r\n      updateState(prevState, {\r\n        [property]: value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onInitAuthentication(credential, isSignUp);\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignUp((prevState) => !prevState);\r\n  };\r\n\r\n  const form = () =>\r\n    !localId ? (\r\n      <>\r\n        <form>\r\n          <Input\r\n            type={\"email\"}\r\n            name={\"email\"}\r\n            placeholder={\"Email\"}\r\n            value={email}\r\n            change={handleChange}\r\n          />\r\n          <Input\r\n            type={\"password\"}\r\n            name={\"password\"}\r\n            placeholder={\"**********\"}\r\n            value={password}\r\n            change={handleChange}\r\n          />\r\n          {error && <p>{error.message}</p>}\r\n          <Button type={\"Success\"} clicked={handleSubmit}>\r\n            {isSignUp ? \"LOGIN\" : \"SIGN UP\"}\r\n          </Button>\r\n        </form>\r\n        <Button type={\"Danger\"} clicked={switchAuthModeHandler}>\r\n          SWITCH TO {isSignUp ? \"SIGN UP\" : \"LOGIN\"}\r\n        </Button>\r\n      </>\r\n    ) : (\r\n      <Redirect to={BURGER_BUILDER} />\r\n    );\r\n\r\n  return <div className={AuthStyle}>{loading ? <Spinner /> : form()}</div>;\r\n};\r\n\r\nconst mapStateToProps = ({ authReducer: { error, loading, localId } }) => ({\r\n  reduxState: {\r\n    error,\r\n    loading,\r\n    localId,\r\n  },\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  reduxActions: {\r\n    onInitAuthentication: (credential, isSignUp) =>\r\n      dispatch(initAuthentication(credential, isSignUp)),\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}