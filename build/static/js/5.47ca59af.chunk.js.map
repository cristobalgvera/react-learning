{"version":3,"sources":["components/Order/Order.jsx","containers/Orders/Orders.jsx","components/Order/Order.module.scss"],"names":["Order","PropTypes","number","string","shape","customer","email","name","deliveryMethod","price","ingredients","className","OrderStyle","list","ingredient","push","ingredientsList","connect","ordersReducer","orders","error","authReducer","idToken","reduxState","localId","dispatch","reduxActions","onInitOrders","initOrders","useEffect","style","textAlign","length","map","order","id","Spinner","module","exports"],"mappings":"4LA0DeA,GApBmBC,IAA1BC,OAA0BD,IAAlBE,OAAkBF,IAAVG,MAjCV,SAAC,GAKR,IAAD,IAJJC,SAAYC,EAIR,EAJQA,MAAOC,EAIf,EAJeA,KACnBC,EAGI,EAHJA,eACAC,EAEI,EAFJA,MACAC,EACI,EADJA,YAaA,OACE,sBAAKC,UAAWC,QAAhB,UACE,gDAAmBL,KACnB,iDAAoBD,KACpB,6CAfoB,WACtB,IAAIO,EAAO,GACX,IAAK,IAAIC,KAAcJ,EACrBG,EAAKE,KACH,iCACGD,EADH,KACiBJ,EAAYI,GAD7B,MAAWA,IAIf,OAAOD,EAQJG,GACD,wCACS,uCAAUP,EAAV,aAET,kDACmB,iCAASD,Y,QC4CnBS,uBAfS,SAAC,GAAD,QAAIC,cAAiBC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAA7B,IAAsCC,YAAeC,EAArD,EAAqDA,QAArD,MAAgF,CACpGC,WAAY,CACRJ,SACAC,QACAI,QAJgB,EAA8DA,QAK9EF,eAImB,SAAEG,GAAF,MAAiB,CACxCC,aAAc,CACVC,aAAc,SAAEL,EAASE,GAAX,OAAwBC,EAASG,YAAWN,EAASE,SAI5DP,EArEA,SAAC,GAUV,IAAD,IARGM,WACIJ,EAOP,EAPOA,OACAC,EAMP,EANOA,MACAE,EAKP,EALOA,QACAE,EAIP,EAJOA,QAEYG,EAEnB,EAFGD,aAAgBC,aAGpBE,qBAAU,kBAAMF,EAAaL,EAASE,KAAU,CAACG,EAAcL,EAASE,IAmCxE,OACI,qCACI,oBAAIM,MAAO,CAAEC,UAAW,UAAxB,oBAdHZ,EAOG,mCACKA,IA5BTA,EAAOa,OAAS,EACZb,EAAOc,KAAI,SAAEC,GAAY,IACb7B,EAAqD6B,EAArD7B,SAAUK,EAA2CwB,EAA3CxB,YAAaD,EAA8ByB,EAA9BzB,MAAOD,EAAuB0B,EAAvB1B,eAAgB2B,EAAOD,EAAPC,GACtD,OACI,cAAC,EAAD,CAEI9B,SAAUA,EACVG,eAAgBA,EAChBC,MAAOA,EACPC,YAAaA,GAJRyB,MAUjB,yDAMAf,EACI,mBAAGU,MAAO,CAAEC,UAAW,UAAvB,mDAEA,cAACK,EAAA,EAAD,W,mBC5ChBC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/5.47ca59af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Order as OrderStyle } from \"./Order.module.scss\";\r\n\r\nconst Order = ({\r\n  customer: { email, name },\r\n  deliveryMethod,\r\n  price,\r\n  ingredients,\r\n}) => {\r\n  const ingredientsList = () => {\r\n    let list = [];\r\n    for (let ingredient in ingredients)\r\n      list.push(\r\n        <span key={ingredient}>\r\n          {ingredient} ({ingredients[ingredient]})\r\n        </span>\r\n      );\r\n    return list;\r\n  };\r\n\r\n  return (\r\n    <div className={OrderStyle}>\r\n      <p>Customer name: {name}</p>\r\n      <p>Customer email: {email}</p>\r\n      <p>Ingredients:</p>\r\n      {ingredientsList()}\r\n      <p>\r\n        Price: <strong>${price} CLP</strong>\r\n      </p>\r\n      <p>\r\n        Delivery method: <strong>{deliveryMethod}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst { number, string, shape } = PropTypes;\r\nOrder.propTypes = {\r\n  customer: shape({\r\n    name: string,\r\n    email: string,\r\n    address: shape({\r\n      street: string,\r\n      postalCode: string,\r\n    }),\r\n  }).isRequired,\r\n  deliveryMethod: string,\r\n  ingredients: shape({\r\n    bacon: number,\r\n    cheese: number,\r\n    meat: number,\r\n    salad: number,\r\n  }).isRequired,\r\n  price: number.isRequired,\r\n};\r\n\r\nexport default Order;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { initOrders } from '../../store/actions/index';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nconst Orders = (\r\n    {\r\n        reduxState: {\r\n            orders,\r\n            error,\r\n            idToken,\r\n            localId,\r\n        },\r\n        reduxActions: { onInitOrders },\r\n    },\r\n) => {\r\n    useEffect(() => onInitOrders(idToken, localId), [onInitOrders, idToken, localId]);\r\n\r\n    const ordersList = () => (\r\n        orders.length > 0 ? (\r\n            orders.map(( order ) => {\r\n                const { customer, ingredients, price, deliveryMethod, id } = order;\r\n                return (\r\n                    <Order\r\n                        key={id}\r\n                        customer={customer}\r\n                        deliveryMethod={deliveryMethod}\r\n                        price={price}\r\n                        ingredients={ingredients}\r\n                    />\r\n                );\r\n\r\n            })\r\n        ) : (\r\n            <p>You have no orders ;)</p>\r\n        )\r\n    );\r\n\r\n    const ordersHelper = () =>\r\n        !orders ? (\r\n            error ? (\r\n                <p style={{ textAlign: 'center' }}>There was an error fetching orders :/</p>\r\n            ) : (\r\n                <Spinner/>\r\n            )\r\n        ) : (\r\n            <>\r\n                {orders && ordersList()}\r\n            </>\r\n        );\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{ textAlign: 'center' }}>Orders</h1>\r\n            {ordersHelper()}\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ( { ordersReducer: { orders, error }, authReducer: { idToken, localId } } ) => ({\r\n    reduxState: {\r\n        orders,\r\n        error,\r\n        localId,\r\n        idToken,\r\n    },\r\n});\r\n\r\nconst mapDispatchToProps = ( dispatch ) => ({\r\n    reduxActions: {\r\n        onInitOrders: ( idToken, localId ) => dispatch(initOrders(idToken, localId)),\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3pd2b\"};"],"sourceRoot":""}